# Configure your Docker registries here
dockerRegistries:
- name: dockerhub
  address: https://index.docker.io
  repositories:
    - paulczar/petclinic
  username: paulczar

# pre-created registry secret
dockerRegistryAccountSecret: registry-secret

# Redis password to use for the in-cluster redis service
# Redis is not exposed publically
redis:
  password: bad-redis-password
  nodeSelector: {}
  cluster:
    enabled: false
  master:
    persistence:
      enabled: true

# Minio access/secret keys for the in-cluster S3 usage
# Minio is not exposed publically
minio:
  enabled: false

s3:
  enabled: true
  bucket: {{ requiredEnv "SPINNAKER_S3_BUCKET"}}
  accessKey: {{ requiredEnv "AWS_ACCESS_KEY"}}
  secretKey: {{ requiredEnv "AWS_SECRET_KEY"}}

halyard:
  spinnakerVersion: 1.14.4
  image:
    tag: 1.20.2
  persistence:
    enabled: true

    # You can remove this section if you have a real CA for your UAA server
  additionalServiceSettings:
    gate.yml:
      kubernetes:
        volumes:
        - id: java-ca-certs
          mountPath: /etc/ssl/certs/java
          type: secret

  # You can remove this section if you don't want to use oauth against UAA
  additionalScripts:
    create: true
    data:
      configure_oauth.sh: |
        source /opt/halyard/additionalConfigMaps/config.src

        OAUTH2_CLIENT_SECRET="$( cat "$OAUTH2_CLIENT_SECRET_FILE" )"

        $HAL_COMMAND config security authn oauth2 edit \
          --client-authentication-scheme header \
          --client-id ${OAUTH2_CLIENT_ID} \
          --client-secret ${OAUTH2_CLIENT_SECRET} \
          --provider other \
          --scope openid,uaa.user,uaa.resource \
          --user-info-mapping-username user_name \
          --user-info-mapping-email email \
          --user-info-mapping-first-name given_name \
          --user-info-mapping-last-name family_name \
          --user-authorization-uri=${OAUTH2_URL}/oauth/authorize \
          --access-token-uri=${OAUTH2_URL}/oauth/token \
          --user-info-uri=${OAUTH2_URL}/userinfo

        $HAL_COMMAND config security authn oauth2 enable

        $HAL_COMMAND config security ui edit --override-base-url "$DECK_URL"
        $HAL_COMMAND config security api edit --override-base-url "$GATE_URL"

  additionalSecrets:
    create: false
    name: spinnaker-additional-secrets

  additionalProfileConfigMaps:
    create: true
    data:
      gate-local.yml: |-
        server:
          tomcat:
            protocolHeader: X-Forwarded-Proto
            remoteIpHeader: X-Forwarded-For
            internalProxies: .*
            httpsServerPort: X-Forwarded-Port

  additionalConfigMaps:
    create: true
    data:
      config.src: |-
        OAUTH2_CLIENT_ID={{ requiredEnv "SPINNAKER_UAA_CLIENT_ID" }}
        OAUTH2_CLIENT_SECRET_FILE=/opt/halyard/additionalSecrets/oauth2_client_secret
        GITHUB_TOKEN_FILE=/opt/halyard/additionalSecrets/github-token
        OAUTH2_URL={{ env "UAA_URL"}}
        GATE_URL=https://{{ requiredEnv "SPINNAKER_GATE_DNS" }}
        DECK_URL=https://{{ requiredEnv "SPINNAKER_DNS" }}

ingress:
  enabled: true
  host: {{ requiredEnv "SPINNAKER_DNS" }}
  tls:
    - secretName: spin-deck-cert
      hosts:
        - {{ requiredEnv "SPINNAKER_DNS" }}
  annotations:
    kubernetes.io/ingress.class: nginx
    ingress.kubernetes.io/ssl-redirect: 'true'
    certmanager.k8s.io/cluster-issuer: letsencrypt-prod
    certmanager.k8s.io/acme-challenge-type: dns01
    certmanager.k8s.io/acme-dns01-provider: prod-clouddns
    kubernetes.io/tls-acme: 'true'

ingressGate:
  enabled: true
  host: {{ requiredEnv "SPINNAKER_GATE_DNS" }}
  tls:
    - secretName: spin-gate-cert
      hosts:
        - {{ requiredEnv "SPINNAKER_GATE_DNS" }}
  annotations:
    kubernetes.io/ingress.class: nginx
    ingress.kubernetes.io/ssl-redirect: 'true'
    certmanager.k8s.io/cluster-issuer: letsencrypt-prod
    certmanager.k8s.io/acme-challenge-type: dns01
    certmanager.k8s.io/acme-dns01-provider: prod-clouddns
    kubernetes.io/tls-acme: 'true'